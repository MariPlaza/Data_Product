plot(Multiple_Regression_Selected, which = 3:3, caption ="")
plot(Multiple_Regression_MASS, which = 3:3, caption ="")
plot(Linear_Regression, which = 4:4, caption ="")
plot(Multiple_Regression_All, which = 4:4, caption ="")
plot(Multiple_Regression_Selected, which = 4:4, caption ="")
plot(Multiple_Regression_MASS, which = 4:4, caption ="")
plot(Linear_Regression, which = 5:5, caption ="")
plot(Multiple_Regression_All, which = 5:5, caption ="")
plot(Multiple_Regression_Selected, which = 5:5, caption ="")
plot(Multiple_Regression_MASS, which = 5:5, caption ="")
plot(Linear_Regression, which = 6:6, caption ="")
plot(Multiple_Regression_All, which = 6:6, caption ="")
plot(Multiple_Regression_Selected, which = 6:6, caption ="")
plot(Multiple_Regression_MASS, which = 6:6, caption ="")
plot(Linear_Regression, which = 1:1, caption ="")
plot(Multiple_Regression_All, which = 1:1, caption ="")
plot(Multiple_Regression_Selected, which = 1:1, caption ="")
plot(Multiple_Regression_MASS, which = 1:1, caption ="")
plot(Linear_Regression)
plot(Linear_Regression, which = 1:1, caption ="", main ="mpg~am")
plot(Multiple_Regression_All, which = 1:1, caption ="", main ="mpg~.")
plot(Multiple_Regression_Selected, which = 1:1, caption ="", main ="mpg~hp+am+wt")
plot(Multiple_Regression_MASS, which = 1:1, caption ="", main ="mpg~hp+cyl+am+wt")
plot(Linear_Regression, which = 5:5, caption ="")
plot(Multiple_Regression_All, which = 5:5, caption ="")
plot(Multiple_Regression_Selected, which = 5:5, caption ="")
plot(Multiple_Regression_MASS, which = 5:5, caption ="")
plot(Linear_Regression, which = 6:6, caption ="")
plot(Multiple_Regression_All, which = 6:6, caption ="")
plot(Multiple_Regression_Selected, which = 6:6, caption ="")
plot(Multiple_Regression_MASS, which = 6:6, caption ="")
plot(Linear_Regression, which = 4:4, caption ="")
plot(Multiple_Regression_All, which = 4:4, caption ="")
plot(Multiple_Regression_Selected, which = 4:4, caption ="")
plot(Multiple_Regression_MASS, which = 4:4, caption ="")
plot(Linear_Regression, which = 3:3, caption ="")
plot(Multiple_Regression_All, which = 3:3, caption ="")
plot(Multiple_Regression_Selected, which = 3:3, caption ="")
plot(Multiple_Regression_MASS, which = 3:3, caption ="")
plot(Linear_Regression, which = 1:1, caption ="", main ="mpg~am")
plot(Multiple_Regression_All, which = 1:1, caption ="", main ="mpg~.")
plot(Multiple_Regression_Selected, which = 1:1, caption ="", main ="mpg~hp+am+wt")
plot(Multiple_Regression_MASS, which = 1:1, caption ="", main ="mpg~hp+cyl+am+wt")
par(oma=c(5,4,3,1), mfrow = c(2, 4), mar = c(0,0,1,1)+2)
plot(Linear_Regression, which = 1:1, caption ="", main ="mpg~am")
plot(Multiple_Regression_All, which = 1:1, caption ="", main ="mpg~.")
plot(Multiple_Regression_Selected, which = 1:1, caption ="", main ="mpg~hp+am+wt")
plot(Multiple_Regression_MASS, which = 1:1, caption ="", main ="mpg~hp+cyl+am+wt")
plot(Linear_Regression, which = 2:2, caption ="", main ="mpg~am")
plot(Multiple_Regression_All, which = 2:2, caption ="", main ="mpg~.")
plot(Multiple_Regression_Selected, which = 2:2, caption ="", main ="mpg~hp+am+wt")
plot(Multiple_Regression_MASS, which = 2:2, caption ="", main ="mpg~hp+cyl+am+wt")
plot(Linear_Regression, which = c(1:3, 5),
caption = list("Residuals vs Fitted", "Normal Q-Q",
"Scale-Location", "Cook's distance",
"Residuals vs Leverage",
expression("Cook's dist vs Leverage  " * h[ii] / (1 - h[ii]))),
panel = if(add.smooth) panel.smooth else points,
sub.caption = NULL, main = "",
ask = prod(par("mfcol")) < length(which) && dev.interactive(),
...,
id.n = 3, labels.id = names(residuals(x)), cex.id = 0.75,
qqline = TRUE, cook.levels = c(0.5, 1.0),
add.smooth = getOption("add.smooth"), label.pos = c(4,2),
cex.caption = 1, cex.oma.main = 1.25)
?plot.lm
plot(Linear_Regression, caption = "Hola como te va")
plot(Linear_Regression, caption = "Hola como te va")
mtext("HALLO", outer=TRUE)
plot(Linear_Regression, mtext="", caption = "")
mtext("HALLO", outer=TRUE)
Linear_Regression$call<-""
plot(Linear_Regression, mtext="", caption = "")
mtext("HALLO", outer=TRUE)
Linear_Regression$call
Linear_Regression
summary(Linear_Regression)
plot(Linear_Regression$fitted.values,Linear_Regression$residuals)
par(oma=c(5,4,3,1), mfrow = c(1, 4), mar = c(0,0,1,1)+2)
plot(Linear_Regression$fitted.values,Linear_Regression$residuals, main ="mpg~am")
plot(Multiple_Regression_All$fitted.values,Multiple_Regression_All$residuals, main ="mpg~.")
plot(Multiple_Regression_Selected$fitted.values,Multiple_Regression_Selected$residuals, main ="mpg~hp+am+wt")
plot(Multiple_Regression_MASS$fitted.values,Multiple_Regression_MASS$residuals, main ="mpg~hp+cyl+am+wt")
mtext("Fitted Values vs. Residuals", outer=TRUE)
plot(Linear_Regression, which = 1:1, caption ="", main ="mpg~am")
plot(Multiple_Regression_All, which = 1:1, caption ="")
plot(Multiple_Regression_Selected, which = 1:1, caption ="")
plot(Multiple_Regression_MASS, which = 1:1, caption ="")
plot(Linear_Regression, which = 2:2, caption ="", main ="mpg~am")
plot(Multiple_Regression_All, which = 2:2, caption ="", main ="mpg~.")
plot(Multiple_Regression_Selected, which = 2:2, caption ="", main ="mpg~hp+am+wt")
plot(Multiple_Regression_MASS, which = 2:2, caption ="", main ="mpg~hp+cyl+am+wt")
qqplot(Linear_Regression$residuals, Linear_Regression$residuals, main ="mpg~am")
eruption.stdres = rstandard(Linear_Regression)
qqnorm(eruption.stdres,
+     ylab="Standardized Residuals",
+     xlab="Normal Scores",
+     main="Old Faithful Eruptions")
qqline(eruption.stdres)
qqnorm(eruption.stdres)
qqline(eruption.stdres)
eruption.stdres = rstandard(Multiple_Regression_All)
qqnorm(eruption.stdres)
qqline(eruption.stdres)
par(oma=c(5,4,3,1), mfrow = c(2, 4), mar = c(0,0,1,1)+2)
plot(Linear_Regression$fitted.values,Linear_Regression$residuals, main ="mpg~am")
plot(Multiple_Regression_All$fitted.values,Multiple_Regression_All$residuals, main ="mpg~.")
plot(Multiple_Regression_Selected$fitted.values,Multiple_Regression_Selected$residuals, main ="mpg~hp+am+wt")
plot(Multiple_Regression_MASS$fitted.values,Multiple_Regression_MASS$residuals, main ="mpg~hp+cyl+am+wt")
LR_Standard <- rstandard(Linear_Regression)
qqnorm(LR_Standard)
qqline(LR_Standard)
MRA_Standard <- rstandard(Multiple_Regression_All)
qqnorm(MRA_Standard)
qqline(MRA_Standard)
MRS_Standard <- rstandard(Multiple_Regression_Selected)
qqnorm(MRS_Standard)
qqline(MRS_Standard)
MRM_Standard <- rstandard(Multiple_Regression_MASS)
qqnorm(MRM_Standard)
qqline(MRM_Standard)
mtext("Graph 3: Fitted Values vs. Residuals and Normal Q-Q", outer=TRUE)
par(oma=c(5,4,3,1), mfrow = c(2, 4), mar = c(0,0,1,1)+2)
plot(Linear_Regression$fitted.values,Linear_Regression$residuals, main ="mpg~am")
plot(Multiple_Regression_All$fitted.values,Multiple_Regression_All$residuals, main ="mpg~.")
plot(Multiple_Regression_Selected$fitted.values,Multiple_Regression_Selected$residuals, main ="mpg~hp+am+wt")
plot(Multiple_Regression_MASS$fitted.values,Multiple_Regression_MASS$residuals, main ="mpg~hp+cyl+am+wt")
LR_Standard <- rstandard(Linear_Regression)
qqnorm(LR_Standard, main ="1")
qqline(LR_Standard)
MRA_Standard <- rstandard(Multiple_Regression_All)
qqnorm(MRA_Standard, main ="2")
qqline(MRA_Standard)
MRS_Standard <- rstandard(Multiple_Regression_Selected)
qqnorm(MRS_Standard, main ="3")
qqline(MRS_Standard)
MRM_Standard <- rstandard(Multiple_Regression_MASS)
qqnorm(MRM_Standard, main ="4")
qqline(MRM_Standard)
mtext("Graph 3: Fitted Values vs. Residuals and Normal Q-Q", outer=TRUE)
par(oma=c(5,4,3,1), mfrow = c(2, 4), mar = c(0,0,1,1)+2)
plot(Linear_Regression$fitted.values,Linear_Regression$residuals, main ="mpg~am")
plot(Multiple_Regression_All$fitted.values,Multiple_Regression_All$residuals, main ="mpg~.")
plot(Multiple_Regression_Selected$fitted.values,Multiple_Regression_Selected$residuals, main ="mpg~hp+am+wt")
plot(Multiple_Regression_MASS$fitted.values,Multiple_Regression_MASS$residuals, main ="mpg~hp+cyl+am+wt")
LR_Standard <- rstandard(Linear_Regression)
qqnorm(LR_Standard, main ="mpg~am")
qqline(LR_Standard)
MRA_Standard <- rstandard(Multiple_Regression_All)
qqnorm(MRA_Standard, main ="mpg~.")
qqline(MRA_Standard)
MRS_Standard <- rstandard(Multiple_Regression_Selected)
qqnorm(MRS_Standard, main ="mpg~hp+am+wt")
qqline(MRS_Standard)
MRM_Standard <- rstandard(Multiple_Regression_MASS)
qqnorm(MRM_Standard, main ="mpg~hp+cyl+am+wt")
qqline(MRM_Standard)
mtext("Graph 3: Fitted Values vs. Residuals and Normal Q-Q", outer=TRUE)
#Check if the required packaged are installed and upload them.
list.of.packages <- c("ggplot2", "GGally", "caret","lattice","gridExtra", "MASS", "corrplot")
new.packages <- list.of.packages[!(list.of.packages %in% installed.packages()[,"Package"])]
if(length(new.packages)) install.packages(new.packages)
library(lattice)
library(ggplot2)
library(GGally)
library(caret)
library(gridExtra)
library(MASS)
library(corrplot)
set.seed(1234)
#Read and Transform Data.
data(mtcars)
head(mtcars)
str(mtcars)
summary(mtcars)
?mtcars
#Transforming the data
Corr_Matrix <- cor(mtcars)
mtcars$cyl <- as.factor(mtcars$cyl)
mtcars$vs <- as.factor(mtcars$vs)
mtcars$am <- as.factor(mtcars$am)
levels(mtcars$am) <- c("Automatic", "Manual")
mtcars$gear <- as.factor(mtcars$gear)
mtcars$carb <- as.factor(mtcars$carb)
#Simple Linear Regression
#Exploring Data
plot_am <- ggplot(data=mtcars,aes(y= mpg, x = am), fill = am)
plot_am <- plot_am + geom_violin(colour = "darkblue", size=2)
plot_am <- plot_am + xlab("am") + theme(panel.grid.major = element_line(colour = "white"))  + theme_bw()
plot_am
#Simple Linear Regression Model
Summary_Data <- matrix(, nrow = 4, ncol = 2)
Linear_Regression <- lm(mpg ~ am,data=mtcars)
summary(Linear_Regression)
Summary_Name <- paste("Simple Linear Regression", summary(Linear_Regression)$call[2], sep = " - ")
Summary_Data[1,1]<- coef(summary(Linear_Regression))["amManual","Estimate"]
Summary_Data[1,2]<-summary(Linear_Regression)$adj.r.squared*100
#Exploratory Analysis of Variables
#Continuos Variables
#Displacement (cu.in.)
plot_disp <- ggplot(data=mtcars,aes(y= mpg, x = disp))   + geom_line(fill="darkblue", stat="identity")
plot_disp <- plot_disp + labs(x="disp",y="Miles per Gallon (mpg)")
plot_disp <- plot_disp + theme(panel.grid.major = element_line(colour = "white")) + theme_bw()
#Gross horsepower
plot_hp <- ggplot(data=mtcars,aes(y= mpg, x = hp))   + geom_line(fill="darkblue", stat="identity")
plot_hp <- plot_hp + labs(x="hp", y="")
plot_hp <- plot_hp + theme(panel.grid.major = element_line(colour = "white")) + theme_bw()
#Rear axle ratio
plot_drat <- ggplot(data=mtcars,aes(y= mpg, x = drat))   + geom_line(fill="darkblue", stat="identity")
plot_drat <- plot_drat + labs(x="drat", y="")
plot_drat <- plot_drat + theme(panel.grid.major = element_line(colour = "white")) + theme_bw()
#Weight (lb/1000)
plot_wt <- ggplot(data=mtcars,aes(y= mpg, x = wt))   + geom_line(fill="darkblue", stat="identity")
plot_wt <- plot_wt + labs(x="wt", y="")
plot_wt <- plot_wt + theme(panel.grid.major = element_line(colour = "white")) + theme_bw()
#1/4 mile time
plot_qsec <- ggplot(data=mtcars,aes(y= mpg, x = qsec))   + geom_line(fill="darkblue", stat="identity")
plot_qsec <- plot_qsec + labs(x="qsec", y="")
plot_qsec <- plot_qsec + theme(panel.grid.major = element_line(colour = "white")) + theme_bw()
#Factor Variables
#Number of cylinders
plot_cyl <- ggplot(data=mtcars,aes(y= mpg, x = cyl), fill = cyl)
plot_cyl <- plot_cyl + geom_violin(colour = "darkblue", size=2)
plot_cyl <- plot_cyl + labs(x="cyl",y="Miles per Gallon (mpg)") + theme(panel.grid.major = element_line(colour = "white")) + theme_bw()
#V/S
plot_vs <- ggplot(data=mtcars,aes(y= mpg, x = vs), fill = vs)
plot_vs <- plot_vs + geom_violin(colour = "darkblue", size=2)
plot_vs <- plot_vs + xlab("V/S") + ylab("") + theme(panel.grid.major = element_line(colour = "white")) + theme_bw()
#Transmission
plot_am <- ggplot(data=mtcars,aes(y= mpg, x = am), fill = am)
plot_am <- plot_am + geom_violin(colour = "darkblue", size=2)
plot_am <- plot_am + xlab("am") + ylab("") + theme(panel.grid.major = element_line(colour = "white")) + theme_bw()
#Number of forward gears
plot_gear <- ggplot(data=mtcars,aes(y= mpg, x = gear), fill = gear)
plot_gear <- plot_gear + geom_violin(colour = "darkblue", size=2)
plot_gear <- plot_gear + xlab("gear")+ ylab("") + theme(panel.grid.major = element_line(colour = "white")) + theme_bw()
#Number of carburetors
plot_carb <- ggplot(data=mtcars,aes(y= mpg, x = carb), fill = carb)
plot_carb <- plot_carb + geom_violin(colour = "darkblue", size=2)
plot_carb <- plot_carb + xlab("carb")+ ylab("") + theme(panel.grid.major = element_line(colour = "white")) + theme_bw()
grid.arrange(plot_disp, plot_hp, plot_drat, plot_wt, plot_qsec, plot_cyl, plot_vs, plot_am, plot_gear, plot_carb, ncol=5, nrow=2)
cex.before <- par("cex")
par(cex = 0.7, oma=c(0,0,2,0))
corrplot.mixed(Corr_Matrix, tl.cex=1/par("cex"),font.main=1, title="Graph 3: Correlation among variables",upper = "circle",
lower = "number",cl.cex=1/par("cex"))
par(cex = cex.before)
#Multiple Regression Model - All Variables
Multiple_Regression_All <- lm(mpg ~ .,data=mtcars)
summary(Multiple_Regression_All)
Summary_Name <- c(Summary_Name, paste("All Regresors", summary(Multiple_Regression_All)$call[2], sep = " - "))
Summary_Data[2,1]<- coef(summary(Multiple_Regression_All))["amManual","Estimate"]
Summary_Data[2,2]<- summary(Multiple_Regression_All)$adj.r.squared*100
#Multiple Regression Model - Selected Variables
Multiple_Regression_Selected <- lm(mpg ~ am + wt + hp,data=mtcars)
summary(Multiple_Regression_Selected)
Summary_Name <- c(Summary_Name, paste("Highly Correlated Regresors", summary(Multiple_Regression_Selected)$call[2], sep = " - "))
Summary_Data[3,1]<- coef(summary(Multiple_Regression_Selected))["amManual","Estimate"]
Summary_Data[3,2]<- summary(Multiple_Regression_Selected)$adj.r.squared*100
#Multiple Regression Model - MASS
Multiple_Regression_MASS <- stepAIC(lm(mpg ~ . ,data=mtcars), direction = 'both', trace = FALSE)
summary(Multiple_Regression_MASS)
Summary_Name <- c(Summary_Name, paste("Highly Correlated Regresors", summary(Multiple_Regression_MASS)$call[2], sep = " - "))
Summary_Data[4,1]<- coef(summary(Multiple_Regression_MASS))["amManual","Estimate"]
Summary_Data[4,2]<- summary(Multiple_Regression_MASS)$adj.r.squared*100
#Regression Summary
colnames(Summary_Data) <- c("AMManual Coefficient (Difference)","Adjusted R-squared")
rownames(Summary_Data) <- Summary_Name
Summary_Data
#Error Evaluation
par(oma=c(5,4,3,1), mfrow = c(2, 4), mar = c(0,0,1,1)+2)
plot(Linear_Regression$fitted.values,Linear_Regression$residuals, main ="mpg~am")
plot(Multiple_Regression_All$fitted.values,Multiple_Regression_All$residuals, main ="mpg~.")
plot(Multiple_Regression_Selected$fitted.values,Multiple_Regression_Selected$residuals, main ="mpg~hp+am+wt")
plot(Multiple_Regression_MASS$fitted.values,Multiple_Regression_MASS$residuals, main ="mpg~hp+cyl+am+wt")
LR_Standard <- rstandard(Linear_Regression)
qqnorm(LR_Standard, main ="mpg~am")
qqline(LR_Standard)
MRA_Standard <- rstandard(Multiple_Regression_All)
qqnorm(MRA_Standard, main ="mpg~.")
qqline(MRA_Standard)
MRS_Standard <- rstandard(Multiple_Regression_Selected)
qqnorm(MRS_Standard, main ="mpg~hp+am+wt")
qqline(MRS_Standard)
MRM_Standard <- rstandard(Multiple_Regression_MASS)
qqnorm(MRM_Standard, main ="mpg~hp+cyl+am+wt")
qqline(MRM_Standard)
mtext("Graph 3: Fitted Values vs. Residuals and Normal Q-Q", outer=TRUE)
library(swirl)
swirl()
plot(child~parent, galton)
plot(jitter(child,4))~parent, galton)
plot(jitter(child,4)~parent, galton)
regrline<-lm(child~parent,galton)
abline(regrline,lwd=3, col='red')
summary(regrline)
regressionLine <- lm(child~parent, galton)
fit<- lm(child~parent, galton)
summary(fit)
mean(fit$residuals)
cov(fit$residuals, galton$parent)
fit$coef[1]
ols.ic <- fit$coef[1]
ols.scope <- fit$coef[2]
ols.slope <- fit$coef[2]
#Here are the vectors of variations or tweaks
sltweak <- c(.01, .02, .03, -.01, -.02, -.03) #one for the slope
ictweak <- c(.1, .2, .3, -.1, -.2, -.3)  #one for the intercept
lhs <- numeric()
rhs <- numeric()
#left side of eqn is the sum of squares of residuals of the tweaked regression line
for (n in 1:6) lhs[n] <- sqe(ols.slope+sltweak[n],ols.ic+ictweak[n])
#right side of eqn is the sum of squares of original residuals + sum of squares of two tweaks
for (n in 1:6) rhs[n] <- sqe(ols.slope,ols.ic) + sum(est(sltweak[n],ictweak[n])^2)
lhs-rhs
all.equal(lhs,rhs)
varChild <- var(OLS)
varChild <- var(chs)
varChild <- var(()
varChild <- var(child)
varChild <- var(mch)
View(galton)
varChild <- var(galton$child)
varRes <- var(fit$residuals)
varEst <- var(est)
est
varEst <- var(est(ols.slope,ols.ic))
all.equal(varChild, varRes+varEst)
efit <- lm(accel~ mag+dist, attenu)
mean(efit$residuals)
cov(efit$residuals, attenu$mag)
cov(efit$residuals, attenu$dist)
cor(gap_nor, gch_nor)
cor(gpa_nor, gch_nor)
l_nor <- lm(gch_nor ~ gpa_nor)
fit <- lm(child ~ parent, galton)
root(sum(fit$residuals^2)/(n-2))
sum(fit$residuals^2)/(n-2)
sqrt(sum(fit$residuals^2)/(n-2))
summary(fit)$sigma
sqrt(deviance(fit)/(n-2))
mu <- mean(galton$child)
sTot <- sum(galton$chil - mu)^2
sTot <- sum(galton$chil - mu))^2)
sTot <- sum((galton$chil - mu)^2)
sTot <- sum((galton$child - mu)^2)
sRes <- deviance(galton$child)
?deviance
sRes <- deviance(sTot)
sRes <- deviance(sum(galton$child-mu)^2)
sRes <- deviance(galton$child-mu)^2)
sRes <- deviance(fit)
1-sRes/sTot
summary(fit)$r.squared
cor(galton$child,galton$parent)^2
ones <- rep(1,nrow(galton))
lm(child~ones+parent-1,galton)
lm(child ~ parent, galton)
lm(child ~ 1, galton)
View(trees)
fit <- lm(Volume ~ Girth + Height + Constant -1, trees)
trees2 <- eliminate("Girth", trees)
head(trees2)
fit2 <- lm(Volume ~ Height + Constant -1, trees2)
lapply(list(fit, fit2), coef)
install.packages("shiny")
library(shiny)
library(shiny)
shinyUI(pageWithSidebar(headerPanel("Data Science FTW!"),sidebarPanel(h3('Sidebart text'), mainPanel(h3('Main Panel text')))))
shinyServer(function(input,output){
}
)
runApp()
library(shiny)
shinyUI(pageWithSidebar(
headerPanel("Data Science FTW!"),
sidebarPanel(
h3('Sidebart text'))
,
mainPanel(
h3('Main Panel text')
)
))
shinyServer(function(input,output){
}
)
runApp()
shinyUI(pageWithSidebar(
headerPanel("Data Science FTW!"),
sidebarPanel(
h3('Sidebart text'))
,
mainPanel(
h3('Main Panel text')
)
))
shinyServer(function(input,output){
}
)
runApp("C:\Users\Marines\Documents\6.-R")
install.packages('devtools')
shinyapps::setAccountInfo(name='mariplaza',
token='C199A45C434F0D78FE457F2B196DB8D9',
secret='XMS/Qios1Z3GEr9SYo3lN+bM1t7ZvdPZO8+UFylT')
Hide secret   Copy to clipboard
shinyapps::setAccountInfo(name='mariplaza', token='C199A45C434F0D78FE457F2B196DB8D9', secret='XMS/Qios1Z3GEr9SYo3lN+bM1t7ZvdPZO8+UFylT')
devtools::install_github('rstudio/shinyapps')
shinyapps::setAccountInfo(name='mariplaza', token='C199A45C434F0D78FE457F2B196DB8D9', secret='XMS/Qios1Z3GEr9SYo3lN+bM1t7ZvdPZO8+UFylT')
devtools::install_github('rstudio/rsconnect')
library(rsconnect)
install.packages("skeleton")
shiny::runApp('6.-R/Cursera/Data_Product/ShinyFinalProject')
shiny::runApp('6.-R/Cursera/Data_Product/ShinyFinalProject')
shiny::runApp('6.-R/Cursera/Data_Product/ShinyFinalProject')
shiny::runApp('6.-R/Cursera/Data_Product/ShinyFinalProject')
shiny::runApp('6.-R/Cursera/Data_Product/ShinyFinalProject')
shiny::runApp('6.-R/Cursera/Data_Product/ShinyFinalProject')
shiny::runApp('6.-R/Cursera/Data_Product/ShinyFinalProject')
shiny::runApp('6.-R/Cursera/Data_Product/ShinyFinalProject')
directory <- '/Users/Marines/Documents/6.-R/Cursera/Data_Product/ShinyFinalProject'
setwd (directory)
source("FruitApp.R")
Data_Matrix <- Fruit_Database()
Data_Matrix_Portion <-Fruit_Database_Portion(Data_Matrix)
Data_Matrix
Data_Matrix[,Calories==52]
Data_Matrix[,Calories=52]
subset(Data_Matrix,Calories==52)
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
publish_github(mariplaza,repo)
library(slidify)
library(slidifyLibraries)
library(knitr)
directory<- '/Users/Marines/Documents/6.-R/Cursera/Data_Product/ShinyFinalProject'
setwd(directory)
author("Fruit Comparison - Nutrition")
slidify('index.Rmd')
browseURL('index.html')
?triangle.plot
shiny::runApp('~/6.-R/Cursera/Data_Product/ShinyFinalProject')
shiny::runApp('~/6.-R/Cursera/Data_Product/ShinyFinalProject')
shiny::runApp('~/6.-R/Cursera/Data_Product/ShinyFinalProject')
shiny::runApp('~/6.-R/Cursera/Data_Product/ShinyFinalProject')
shiny::runApp('~/6.-R/Cursera/Data_Product/ShinyFinalProject')
shiny::runApp('~/6.-R/Cursera/Data_Product/ShinyFinalProject')
shiny::runApp('~/6.-R/Cursera/Data_Product/ShinyFinalProject')
shiny::runApp('~/6.-R/Cursera/Data_Product/ShinyFinalProject')
shiny::runApp('~/6.-R/Cursera/Data_Product/ShinyFinalProject')
shiny::runApp('~/6.-R/Cursera/Data_Product/ShinyFinalProject')
DataPlot <- Prepare_Data(Data_Matrix,all, all, Calories)
library(ggplot2)
directory <- '/Users/Marines/Documents/6.-R/Cursera/Data_Product/ShinyFinalProject'
setwd (directory)
source("FruitApp.R")
Data_Matrix <- Fruit_Database()
Data_Matrix_Portion <-Fruit_Database_Portion(Data_Matrix)
DataPlot <- Prepare_Data(Data_Matrix,"all", "all", "Calories")
DataPlot
Fruit1 <- "all"
Fruit2 <- "all"
dataset <- Data_Matrix
Variable <- "Calories"
if (Fruit1=="all" && Fruit2=="all")
{
Data1 <- dataset[dataset$Fruit!=Fruit2,]
Data2 <- dataset[Fruit2,]
Data1$Category <- 'All Fruits'
Data2$Category <- 'All Fruits'
}
Data1
Data2
Data2 <- NULL
Data1$Category <- 'All Fruits'
Data2$Category <- 'All Fruits'
Data2
if (Fruit1=="all" && Fruit2=="all")
{
Data1 <- dataset[dataset$Fruit!=Fruit2,]
Data2 <- NULL
Data1$Category <- 'All Fruits'
}
Data1
Data2
Data <- rbind(Data1, Data2)
Data
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
